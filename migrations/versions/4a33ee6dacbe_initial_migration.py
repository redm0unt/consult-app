"""Initial migration

Revision ID: 4a33ee6dacbe
Revises: 
Create Date: 2025-10-01 00:18:36.810134

"""
from alembic import op
import sqlalchemy as sa
import secrets
from werkzeug.security import generate_password_hash


# revision identifiers, used by Alembic.
revision = '4a33ee6dacbe'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('schools',
    sa.Column('school_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('school_name', sa.String(length=255), nullable=False),
    sa.Column('invite_code', sa.String(length=45), nullable=False),
    sa.PrimaryKeyConstraint('school_id', name=op.f('pk_schools'))
    )
    op.create_table('buildings',
    sa.Column('building_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=70), nullable=False),
    sa.Column('address', sa.String(length=90), nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['school_id'], ['schools.school_id'], name=op.f('fk_buildings_school_id_schools'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('building_id', name=op.f('pk_buildings'))
    )
    op.create_table('events',
    sa.Column('event_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('scheduled', 'ongoing', 'completed', 'cancelled', name='eventstatus'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['school_id'], ['schools.school_id'], name=op.f('fk_events_school_id_schools'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', name=op.f('pk_events'))
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('middle_name', sa.String(length=90), nullable=True),
    sa.Column('last_name', sa.String(length=90), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('role', sa.String(length=32), nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['school_id'], ['schools.school_id'], name=op.f('fk_users_school_id_schools'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('password_hash', name=op.f('uq_users_password_hash'))
    )
    op.create_table('admins',
    sa.Column('admin_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['users.user_id'], name=op.f('fk_admins_admin_id_users'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('admin_id', name=op.f('pk_admins'))
    )
    op.create_table('parents',
    sa.Column('parent_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['users.user_id'], name=op.f('fk_parents_parent_id_users'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('parent_id', name=op.f('pk_parents'))
    )
    op.create_table('teachers',
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['teacher_id'], ['users.user_id'], name=op.f('fk_teachers_teacher_id_users'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('teacher_id', name=op.f('pk_teachers'))
    )
    op.create_table('building_booking',
    sa.Column('building_booking_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.building_id'], name=op.f('fk_building_booking_building_id_buildings'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], name=op.f('fk_building_booking_event_id_events'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name=op.f('fk_building_booking_teacher_id_teachers'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('building_booking_id', name=op.f('pk_building_booking'))
    )
    op.create_table('slots',
    sa.Column('slot_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('booked', 'cancelled', name='slotstatus'), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), sa.Computed('TIMESTAMPDIFF(MINUTE, start_time, end_time)', ), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], name=op.f('fk_slots_event_id_events'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['parents.parent_id'], name=op.f('fk_slots_parent_id_parents'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name=op.f('fk_slots_teacher_id_teachers'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('slot_id', name=op.f('pk_slots'))
    )

    # Create 3 test users: admin, teacher, parent
    schools_table = sa.table(
        'schools',
        sa.column('school_id', sa.Integer),
        sa.column('school_name', sa.String),
        sa.column('invite_code', sa.String),
    )

    op.bulk_insert(
        schools_table,
        [
            {
                'school_id': 1,
                'school_name': 'Demo School',
                'invite_code': secrets.token_hex(16),
            }
        ],
    )

    users_table = sa.table(
        'users',
        sa.column('user_id', sa.Integer),
        sa.column('first_name', sa.String),
        sa.column('middle_name', sa.String),
        sa.column('last_name', sa.String),
        sa.column('email', sa.String),
        sa.column('password_hash', sa.String),
        sa.column('role', sa.String),
        sa.column('school_id', sa.Integer),
    )

    admin_password = generate_password_hash('admin')
    teacher_password = generate_password_hash('teacher')
    parent_password = generate_password_hash('parent')

    op.bulk_insert(
        users_table,
        [
            {
                'user_id': 1,
                'first_name': 'Анна',
                'middle_name': 'Мельникова',
                'last_name': 'Иванова',
                'email': 'admin@admin.com',
                'password_hash': admin_password,
                'role': 'admin',
                'school_id': 1,
            },
            {
                'user_id': 2,
                'first_name': 'Борис',
                'middle_name': None,
                'last_name': 'Петров',
                'email': 'teacher@teacher.com',
                'password_hash': teacher_password,
                'role': 'teacher',
                'school_id': 1,
            },
            {
                'user_id': 3,
                'first_name': 'Светлана',
                'middle_name': None,
                'last_name': 'Сидорова',
                'email': 'parent@parent.com',
                'password_hash': parent_password,
                'role': 'parent',
                'school_id': 1,
            },
        ],
    )

    admins_table = sa.table(
        'admins',
        sa.column('admin_id', sa.Integer),
    )

    teachers_table = sa.table(
        'teachers',
        sa.column('teacher_id', sa.Integer),
    )

    parents_table = sa.table(
        'parents',
        sa.column('parent_id', sa.Integer),
    )

    op.bulk_insert(admins_table, [{'admin_id': 1}])
    op.bulk_insert(teachers_table, [{'teacher_id': 2}])
    op.bulk_insert(parents_table, [{'parent_id': 3}])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('slots')
    op.drop_table('building_booking')
    op.drop_table('teachers')
    op.drop_table('parents')
    op.drop_table('admins')
    op.drop_table('users')
    op.drop_table('events')
    op.drop_table('buildings')
    op.drop_table('schools')
    # ### end Alembic commands ###
